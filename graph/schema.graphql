scalar Time
scalar Upload

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
}

"The `LoginInput` type represents the required login input"
input LoginInput {
  "The `username` can either be an email or the actual username"
  username: String!
  "The `password` length must be 8 characters minimum"
  password: String!
}

type Activity {
  "The `id` is the activity id in the database"
  id: ID!
  createdAt: Time!
  startTime: Time!
  endTime: Time!
  comment: String
  sportType: String!
  "The nothernmost boundary latitude. Null if stationary"
  boundaryNorth: Float
  "The southernmost boundary latitude. Null if stationary"
  boundarySouth: Float
  "The easternmost boundary longitude. Null if stationary"
  boundaryEast: Float
  "The westernmost boundary longitude. Null if stationary"
  boundaryWest: Float
  "Pause time in seconds"
  timePaused: Int
  "The average pace"
  avgPace: Float
  "The average speed in m/s"
  avgSpeed: Float
  "The maximum speed in m/s"
  maxSpeed: Float
  "The total distance covered in m"
  totalDistance: Float
  "The avarage cadence in rpm"
  avgCadence: Int
  "The average fractional cadence in rpm"
  avgFractionalCadence: Int
  "The maximum cadence in rpm"
  maxCadence: Int
  "The altitude change going up in m"
  totalAscent: Int
  "The altitude change going down in m"
  totalDescent: Int
  "The maximum altitude in m"
  maxAltitude: Float
  "The average heart rate in rpm"
  avgHeartRate: Int
  "The maximum heart rate in rpm"
  maxHeartRate: Int
  "The total training effect"
  totalTrainingEffect: Float

  user: User!
  records: [ActivityRecord!]!
}

"The `ActivityRecord` type is a  timestamped and geo located data record for an activity"
type ActivityRecord {
  "The `id` is the file id in the database"
  id: ID!
  "The `activityId` is the activity id in the database"
  activityId: ID!
  "The `timestamp` is the time when the entry was recorded"
  timestamp: Time
  "The `positionLat` the latitude component of the coordinate"
  positionLat: Float
  "The `positionLong` the longitude component of the coordinate"
  positionLong: Float
  "The `distance` is the traveled distance since beginning of the activity"
  distance: Float
  "The `timeFromCourse` is the time difference to the current course"
  timeFromCourse: Int
  "The `heartRate` is heart rate at the time of recording"
  heartRate: Int
  "The `altitude` is altitude at the time of recording"
  altitude: Float
  "The `speed` is speed at the time of recording"
  speed: Float
  "The `power` is power at the time of recording"
  power: Int
  "The `grade` is grade at the time of recording"
  grade: Int
  "The `cadence` is cadence at the time of recording"
  cadence: Int
  "The `fractionalCadence` is fractionalCadence at the time of recording"
  fractionalCadence: Int
  "The `resistance` is resistance at the time of recording"
  resistance: Int
  "The `cycleLength` is cycleLength at the time of recording"
  cycleLength: Int
  "The `temperature` is temperature at the time of recording"
  temperature: Int
  "The `accumulatedPower` is accumulatedPower at the time of recording"
  accumulatedPower: Int
}

input ActivityFilter {
  startTime: Time
  endTime: Time
  comment: String
  sportType: String
}

type Query {
  activity(id: ID!): Activity!
  activities(
    filter: ActivityFilter
    limit: Int = 10
    offset: Int = 0
  ): [Activity!]!
  user(id: ID!): User!
}

input NewActivity {
  startTime: Time!
  endTime: Time!
  comment: String
  sportType: String!
}

input UpdateActivity {
  id: ID!
  startTime: Time
  endTime: Time
  comment: String
  sportType: String
}

"The `ImportActivity` input represents a to imported activity"
input ImportActivity {
  "The `fileID` is the ID of a `FileDescriptor`"
  fileID: ID!
  "The `comment` is an optional comment to be added to the activity"
  comment: String
}

input UploadFile {
  id: Int!
  file: Upload!
}

"The `FileDescriptor` type represents a file in the system"
type FileDescriptor {
  "The `id` is the file id in the database"
  id: String!
  "The `fileName` is the original name of the file"
  fileName: String!
  "The `user` is the owner of the file"
  user: User!
  "`createdAt` is the time when the file was uploaded"
  createdAt: Time!
  """
  `contentType` is the file type of content this file contains.
  Supported options: image, fit
  """
  contentType: String!
}

type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!

  addActivity(input: NewActivity!): Activity!
  importActivity(input: ImportActivity!): Activity!
  updateActivity(input: UpdateActivity!): Activity!
  deleteActivity(id: ID!): Boolean!

  singleUpload(file: Upload!): FileDescriptor!
}
