scalar Time
scalar Upload

type AuthToken {
    accessToken: String!
    expiredAt: Time!
}

type AuthResponse {
    authToken: AuthToken!
    user: User!
}

type User {
    id: ID!
    username: String!
    email: String!
    createdAt: Time!
    updatedAt: Time!
}

input RegisterInput {
    username: String!
    email: String!
    password: String!
    confirmPassword: String!
}

"The `LoginInput` type represents the required login input"
input LoginInput {
    "The `username` can either be an email or the actual username"
    username: String!
    "The `password` length must be 8 characters minimum"
    password: String!
}

type Activity {
    id: ID!
    createdAt: Time!
    startTime: Time!
    endTime: Time!
    comment: String
    sportType: String!
    user: User!
}

input ActivityFilter {
    startTime: Time
    endTime: Time
    comment: String
    sportType: String
}

type Query {
    activity(id: ID!): Activity!
    activities(filter: ActivityFilter, limit: Int = 10, offset: Int = 0): [Activity!]!
    user(id: ID!): User!
}

input NewActivity {
    startTime: Time!
    endTime: Time!
    comment: String
    sportType: String!
}

input UpdateActivity {
    id: ID!
    startTime: Time
    endTime:Time
    comment: String
    sportType: String
}

"The `ImportActivity` input represents a to imported activity"
input ImportActivity {
    "The `fileID` is the ID of a `FileDescriptor`"
    fileID: ID!
    "The `comment` is an optional comment to be added to the activity"
    comment: String
}

input UploadFile {
    id: Int!
    file: Upload!
}

"The `FileDescriptor` type represents a file in the system"
type FileDescriptor {
    "The `id` is the file id in the database"
    id: String!
    "The `fileName` is the original name of the file"
    fileName: String!
    "The `user` is the owner of the file"
    user: User!
    "`createdAt` is the time when the file was uploaded"
    createdAt: Time!
    """
    `contentType` is the file type of content this file contains.
    Supported options: image, fit
    """
    contentType: String!
}

type Mutation {
    register(input: RegisterInput!): AuthResponse!
    login(input: LoginInput!): AuthResponse!

    addActivity(input: NewActivity!): Activity!
    importActivity(input: ImportActivity!): Activity!
    updateActivity(input: UpdateActivity!): Activity!
    deleteActivity(id: ID!): Boolean!

    singleUpload(file: Upload!): FileDescriptor!
}